/**
 * Script d'initialisation de la base de donn√©es
 * Cr√©e la base de donn√©es et ex√©cute le sch√©ma SQL
 */

require('dotenv').config(); // ‚úÖ On laisse dotenv chercher le .env dans le dossier courant
const { Client } = require('pg');
const fs = require('fs').promises;
const path = require('path');
const bcrypt = require('bcrypt');

const logger = console;

async function initDatabase() {
    // Connexion sans sp√©cifier de base de donn√©es
    const client = new Client({
        host: process.env.DB_HOST,
        port: process.env.DB_PORT,
        user: process.env.DB_USER,
        password: process.env.DB_PASSWORD
    });

    try {
        logger.log('üîÑ Connexion √† PostgreSQL...');
        await client.connect();
        
        // V√©rifier si la base de donn√©es existe
        const dbName = process.env.DB_NAME || 'import_export_db';
        const checkDbQuery = `SELECT 1 FROM pg_database WHERE datname = '${dbName}'`;
        const dbExists = await client.query(checkDbQuery);
        
        if (dbExists.rows.length === 0) {
            logger.log(`üì¶ Cr√©ation de la base de donn√©es ${dbName}...`);
            await client.query(`CREATE DATABASE ${dbName}`);
            logger.log('‚úÖ Base de donn√©es cr√©√©e');
        } else {
            logger.log('‚ÑπÔ∏è  La base de donn√©es existe d√©j√†');
        }
        
        await client.end();
        
        // Se reconnecter √† la base de donn√©es cr√©√©e
        const dbClient = new Client({
            host: process.env.DB_HOST || 'localhost',
            port: process.env.DB_PORT || 5432,
            database: dbName,
            user: process.env.DB_USER || 'postgres',
            password: process.env.DB_PASSWORD || 'calvin'
        });
        
        await dbClient.connect();
        
        // Lire et ex√©cuter le fichier schema.sql
        logger.log('üìã Lecture du fichier schema.sql...');
        const schemaPath = path.join(__dirname, 'schema.sql');
        const schema = await fs.readFile(schemaPath, 'utf8');
        
        // Remplacer le mot de passe hash√© dans le schema
        const hashedPassword = await bcrypt.hash('calvin', 10);
        const schemaWithPassword = schema.replace('$2b$10$YourHashedPasswordHere', hashedPassword);
        
        logger.log('üèóÔ∏è  Ex√©cution du sch√©ma SQL...');
        await dbClient.query(schemaWithPassword);
        
        logger.log('‚úÖ Base de donn√©es initialis√©e avec succ√®s !');
        logger.log('\nüìå Informations de connexion :');
        logger.log(`   - Email : ibrahim.ibraza@hotmail.fr`);
        logger.log(`   - Mot de passe : calvin`);
        logger.log(`   - Base de donn√©es : ${dbName}`);
        logger.log(`   - Host : ${process.env.DB_HOST || 'localhost'}`);
        logger.log(`   - Port : ${process.env.DB_PORT || 5432}`);
        
        await dbClient.end();
        
    } catch (error) {
        logger.error('‚ùå Erreur lors de l\'initialisation :', error.message);
        process.exit(1);
    }
}

// Ajouter le script au package.json
async function updatePackageJson() {
    try {
        const packagePath = path.join(__dirname, '../package.json');
        const packageContent = await fs.readFile(packagePath, 'utf8');
        const packageJson = JSON.parse(packageContent);
        
        if (!packageJson.scripts['db:init']) {
            packageJson.scripts['db:init'] = 'node database/init.js';
            packageJson.scripts['db:reset'] = 'node database/init.js --force';
            
            await fs.writeFile(packagePath, JSON.stringify(packageJson, null, 2));
            logger.log('‚úÖ Scripts ajout√©s au package.json');
        }
    } catch (error) {
        logger.warn('‚ö†Ô∏è  Impossible de mettre √† jour package.json:', error.message);
    }
}

// Ex√©cution
(async () => {
    const forceReset = process.argv.includes('--force');
    
    if (forceReset) {
        logger.log('‚ö†Ô∏è  Mode FORCE activ√© - La base de donn√©es sera r√©initialis√©e');
    }
    
    await initDatabase();
    await updatePackageJson();
    
    logger.log('\nüéâ Initialisation termin√©e !');
    logger.log('Vous pouvez maintenant d√©marrer le serveur avec : npm start');
})();